    信号的本质：软中断信号（signal，又简称为信号）用来通知进程发生了异步事件。在软件层次上是对中断机制的一种模拟。
在原理上，一个进程收到一个信号与处理器收到一个中断请求可以说是一样的。信号是进程间通信机制中唯一的异步通信机制，
一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达。进程之间可以互相通过系统调用kill发送软中断信号。
内核也可以因为内部事件而给进程发送信号，通知进程发生了某个事件。信号机制除了基本通知功能外，还可以传递附加信息。
    要先用signal注册中断函数，然后有进程向其发送了中断信号之后才能按照注册的中断函数来执行
一、signal------------------------------------------------------------------------------------------------------------------------
#include <signal.h> 
#include <stdio.h> 
#include <unistd.h> 
 
void ouch(int sig) 
{ 
 printf("\nOUCH! - I got signal %d\n", sig); 
 //恢复终端中断信号SIGINT的默认行为 
 (void) signal(SIGINT, SIG_DFL); 
} 
 
int main() 
{ 
 //改变终端中断信号SIGINT的默认行为，使之执行ouch函数 
 //而不是终止程序的执行 
 (void) signal(SIGINT, ouch); 
 while(1) 
 { 
  printf("Hello World!\n"); 
  sleep(1); 
 } 
 return 0; 
} 

二、sigaction-------------------------------------------------------------------------------------------------------------------
#include <unistd.h> 
#include <stdio.h> 
#include <signal.h> 
 
void ouch(int sig) 
{ 
 printf("\nOUCH! - I got signal %d\n", sig); 
} 
 
int main() 
{ 
 struct sigaction act; 
 act.sa_handler = ouch; 
 //创建空的信号屏蔽字，即不屏蔽任何信息 
 sigemptyset(&act.sa_mask); 
 //使sigaction函数重置为默认行为 
 act.sa_flags = SA_RESETHAND; 
 
 sigaction(SIGINT, &act, 0); 
 while(1) 
 { 
  printf("Hello World!\n"); 
  sleep(1); 
 } 
 return 0; 
}
三、kill-------------------------------------------------------------------------------------------------------------------------
#include <unistd.h> 
#include <sys/types.h> 
#include <stdlib.h> 
#include <stdio.h> 
#include <signal.h> 
 
static int alarm_fired = 0; 
 
void ouch(int sig) 
{ 
 alarm_fired = 1; 
} 
 
int main() 
{ 
 pid_t pid; 
 pid = fork(); 
 switch(pid) 
 { 
 case -1: 
  perror("fork failed\n"); 
  exit(1); 
 case 0: 
  //子进程 
  sleep(5); 
  //向父进程发送信号 
  kill(getppid(), SIGALRM); 
  exit(0); 
 default:; 
 } 
 //设置处理函数 
 signal(SIGALRM, ouch); 
 while(!alarm_fired) 
 { 
  printf("Hello World!\n"); 
  sleep(1); 
 } 
 if(alarm_fired) 
  printf("\nI got a signal %d\n", SIGALRM); 
 
 exit(0); 
} 
四、alarm---------------------------------------------------------------------------------------------------------------------
#include <unistd.h> 
#include <sys/types.h> 
#include <stdlib.h> 
#include <stdio.h> 
#include <signal.h> 
static int alarm_fired = 0; 
void ouch(int sig) 
{ 
 alarm_fired = 1; 
} 
int main() 
{ 
 //关联信号处理函数 
 signal(SIGALRM, ouch); 
 //调用alarm函数，5秒后发送信号SIGALRM 
 alarm(5); 
 //挂起进程 
 pause(); 
 //接收到信号后，恢复正常执行 
 if(alarm_fired == 1) 
  printf("Receive a signal %d\n", SIGALRM); 
 exit(0); 
} 
