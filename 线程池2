#include<vector>
#include<string>
#include<pthread.h>
#include <iostream>    
#include <unistd.h>    
#include <stdlib.h>
using namespace std;

//执行任务的类，设置任务数据并执行 
class CTask
{
protected:
	string m_strTaskName;
	void* m_ptrData;
public:
	CTask(){}
	CTask(const string& taskName)
	{
		m_strTaskName = taskName;
		m_ptrData = NULL;
	}
	virtual ~CTask(){}
	virtual int Run() = 0;
	void setData(void* data);
};

//线程池管理类的实现 
class CThreadPool
{
private:
	static vector<CTask*> m_vecTaskList;
	static bool shutdown;
	int m_iThreadNum;
	pthread_t* pthread_id;
	static pthread_mutex_t m_pthreadMutex;
	static pthread_cond_t m_pthreadCond;
protected:
	static void* ThreadFunc(void* threadData);
	static int MoveToIdle(pthread_t tid);
	static int MoveToBusy(pthread_t tid);
	int Create();
public:
	CThreadPool(int threadNum = 10);
	int AddTask(CTask* task);
	int StopAll();
	int getTaskSize();

};

void CTask::setData(void* data)
{
	m_ptrData = data;
}

vector<CTask*> CThreadPool::m_vecTaskList;
bool CThreadPool::shutdown = false;
pthread_mutex_t CThreadPool::m_pthreadMutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t CThreadPool::m_pthreadCond = PTHREAD_COND_INITIALIZER;

CThreadPool::CThreadPool(int threadNum)
{
	this->m_iThreadNum = threadNum;
	cout << "i will create " << threadNum << " threads " << endl;
	Create();
}

void* CThreadPool::ThreadFunc(void* threadData)
{
	pthread_t tid = pthread_self();
	while (1)
	{
		pthread_mutex_lock(&m_pthreadMutex);
		while (m_vecTaskList.size() == 0 && !shutdown)
		{
			pthread_cond_wait(&m_pthreadCond, &m_pthreadMutex);
		}
		if (shutdown)
		{
			pthread_mutex_unlock(&m_pthreadMutex);
			printf("thread %lu will exit\n", tid);
			pthread_exit(NULL);
		}

		printf("tid %lu run\n", tid);
		vector<CTask*>::iterator iter = m_vecTaskList.begin();
		CTask* task = *iter;
		if (iter != m_vecTaskList.end())
		{
			task = *iter;
			m_vecTaskList.erase(iter);
		}
		pthread_mutex_unlock(&m_pthreadMutex);
		task->Run();
		printf("tid:%lu idle\n", tid);
	}
	return (void*)0;
}

int CThreadPool::AddTask(CTask* task)
{
	pthread_mutex_lock(&m_pthreadMutex);
	this->m_vecTaskList.push_back(task);
	pthread_mutex_unlock(&m_pthreadMutex);
	pthread_cond_signal(&m_pthreadCond);
	return 0;
}

//创建线程
int CThreadPool::Create()
{
	pthread_id = (pthread_t*)malloc(sizeof(pthread_t) * m_iThreadNum);
	for (int i = 0; i < m_iThreadNum; i++)
	{
		pthread_create(&pthread_id[i], NULL, ThreadFunc, NULL);
	}

	return 0;
}

int CThreadPool::StopAll()
{
	if (shutdown)
	{
		return -1;
	}
	printf("Now i will end all threads!\n");
	shutdown = true;
	pthread_cond_broadcast(&m_pthreadCond);
	for (int i = 0; i < m_iThreadNum; i++)
	{
		pthread_join(pthread_id[i], NULL);
	}

	free(pthread_id);
	pthread_id = NULL;
	pthread_mutex_destroy(&m_pthreadMutex);
	pthread_cond_destroy(&m_pthreadCond);
	return 0;
}

int CThreadPool::getTaskSize()
{
	return m_vecTaskList.size();
}

class CMyTask :public CTask
{
	public:
	CMyTask(){}
	inline int Run()
	{
		printf("%s\n", (char*)this->m_ptrData);
		sleep(10);
		return 0;
	}
};

int main()
{
	CMyTask taskObj;
	char tmp[50];
	CThreadPool threadPool(10);
	for (int i = 0; i < 20; i++)
	{
		//memset(tmp, 0, 50);
		printf("i = %d\n",i);
		snprintf(tmp, 50, "this is the %d new thread runing\n", i);
		taskObj.setData((void*)tmp);
		threadPool.AddTask(&taskObj);
		//注意为什么每个线程的输出都是i=19
	}

	while (1)
	{
		printf("there are still %d tasks need to handle\n", threadPool.getTaskSize());
		if (threadPool.getTaskSize() == 0)
		{
			if (threadPool.StopAll() == -1)
			{
				printf("now i will exit from main\n");
				exit(0);
			}
		}
		sleep(2);
	}
	return 0;
}
