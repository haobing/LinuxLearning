消息队列跟命名管道有不少的相同之处，与命名管道一样，消息队列进行通信的进程可以是不相关的进程，
同时它们都是通过发送和接收的方式来传递数据的。在命名管道中，发送数据用write，接收数据用read，
而在消息队列中，发送数据用msgsnd，接收数据用msgrcv。而且它们对每个数据都有一个最大长度的限制。
与命名管道相比，消息队列的优势在于，消息队列也可以独立以发送和接收进程而存在，从而消除了在同步命名管道的打开和关闭时可能产生的困难。
同时通过发送消息还可以避免命名管道的同步和阻塞问题，不需要由进程自己来提供同步方法。
接收程序可以通过消息类型号（频道号）有选择地接收数据，而不是像命名管道中那样，只能默认地接收。它们都是读出消息之后就将管道或者队列中的消息删除。

调用msgrcv()后消息将从消息队列中删除；
如果一个进程发送了n条消息到消息队列（调用msgsnd n次）并关闭进程，另一个进程需要分n次从消息队列读出消息（调用msgrcv n次），
且读出消息的顺序和发送进消息队列的顺序相同相同

#include <stdlib.h>  
#include <stdio.h>  
#include <string.h>  
#include <errno.h>  
#include <unistd.h>   
#include <sys/types.h>  
#include <sys/ipc.h>  
#include <sys/msg.h> 

#define PATH "/mnt/hgfs/Linux/practice/text"
#define SIZE 1024

struct my_message{
	long int my_type;
char buf[SIZE];
};

int main()
{
	key_t key;
	struct my_message message;
	int msgid;
	char buf[SIZE];
	key=ftok(PATH,1);
	printf("key=%d\n",key);
	msgid=msgget(key,0666|IPC_CREAT);
	if(msgid==-1)
		printf("msgget error\n");
	while(1){
	msgrcv(msgid,(void *)&message,SIZE,10,0);//ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)
                                           //msgtyp等于0 则返回队列的最早的一个消息。
                                            //msgtyp大于0，则返回其类型为mtype的第一个消息。
                                             //msgtyp小于0,则返回其类型小于或等于mtype参数的绝对值的最小的一个消息。
					     //msgsz的大小msgrcv函数中应该和msgsnd函数中一致，不然会出现问题
					     *msgflg 0 阻塞式接收消息，没有该类型的消息msgrcv函数一直阻塞等待*/  
        /*msgflg IPC_NOWAIT 如果没有返回条件的消息调用立即返回，此时错误码为ENOMSG*/  
        /*msgflg IPC_EXCEPT 与msgtype配合使用返回队列中第一个类型不为msgtype的消息*/  
        /*msgflg IPC_NOERROR 如果队列中满足条件的消息内容大于所请求的size字节，则把该消息截断，截断部分将被丢弃*/ 
	
	memcpy(buf,message.buf,SIZE);
	fputs(buf,stdout);
	if(strncmp(buf,"quit",4)==0)
		break;
}

msgctl(msgid,IPC_RMID,0);
return 0;
}


#include <stdlib.h>  
#include <stdio.h>  
#include <string.h>  
#include <errno.h>  
#include <unistd.h>   
#include <sys/types.h>  
#include <sys/ipc.h>  
#include <sys/msg.h>

#define PATH "/mnt/hgfs/Linux/practice/text"
#define SIZE 1024

struct my_msg{
	long int mytype;
	char buf[SIZE];
};

int main()
{
	int msgid;
	key_t key;
	struct my_msg message;
	key=ftok(PATH,1);
	printf("key=%d\n",key);
	
	msgid=msgget(key,0666|IPC_CREAT);
	
	message.mytype=10;
	while(1){
	fputs("please input some words\n",stdout);
	fgets(message.buf,SIZE,stdin);
	
	msgsnd(msgid,(void *)&message,SIZE,0);
	
	if(strncmp(message.buf,"quit",3)==0)
		break;
	}
	msgctl(msgid,IPC_RMID,0);
	return 0;
}
	

