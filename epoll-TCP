epoll_wait运行的道理是
等侍注册在epfd上的socket fd的事务的产生，若是产生则将产生的sokct fd和事务类型放入到events数组中。
并 且将注册在epfd上的socket fd的事务类型给清空， 
所以若是下一个轮回你还要存眷这个socket 
fd的话，则须要用epoll_ctl（epfd，EPOLL_CTL_MOD，listenfd，&ev）来从头设置socket 

#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

#define MAXLINE 10
#define OPEN_MAX 100
#define LISTEN 20
#define PORT 8888

int main()
{
	int sockfd,con,sock_fd;
	struct sockaddr_in server,client;
	int len;
	char buf[MAXLINE];
	int epfd;
	int fds;
	int n,i;
	struct epoll_event ev,events[20];
	len=sizeof(client);
	
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	bind(sockfd,(struct sockaddr*)&server,sizeof(server));
	listen(sockfd,10);
	
	epfd=epoll_create(256);
	ev.data.fd=sockfd;
	ev.events=EPOLLIN;
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&ev);
	
	while(1){
		fds=epoll_wait(epfd,events,20,500);
		
		for(i=0;i<fds;i++){
			if(events[i].data.fd==sockfd){
				con=accept(sockfd,(struct sockaddr*)&client,&len);
				printf("accept a new client :%s\n",inet_ntoa(client.sin_addr));
				ev.data.fd=con;
				ev.events=EPOLLIN;
				epoll_ctl(epfd,EPOLL_CTL_ADD,con,&ev);
			}
			else if(events[i].events&EPOLLIN){
				if((sock_fd=events[i].data.fd)<0)
					continue;
				if((n=recv(sock_fd,buf,MAXLINE,0))<0){
					if(errno==ECONNRESET){
						close(sock_fd);
					}
					else{
						printf("readline error\n");
					}}
				else if(n==0){
					close(sock_fd);
					printf("close\n");
					events[i].data.fd=-1;
				}
				printf("%d-->%s\n",sock_fd,buf);
				ev.data.fd=sock_fd;
				ev.events=EPOLLOUT;
				epoll_ctl(epfd,EPOLL_CTL_MOD,sock_fd,&ev);
			  }
		 else if(events[i].events&EPOLLOUT){
			 	sock_fd=events[i].data.fd;
			 	printf("out\n");
			 	scanf("%s",buf);
			 	send(sock_fd,buf,MAXLINE,0);
			 	
			 	ev.data.fd=sock_fd;
			 	ev.events=EPOLLIN;
			 	epoll_ctl(epfd,EPOLL_CTL_MOD,sock_fd,&ev);
			}
		}
	}
}

聊天室服务器：
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdbool.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <strings.h>
#include <string.h>

#define PORT 8888
#define SIZE 1024
#define SERVER_MESSAGE "welcome to the char rome!ur chat ID is:CLIENT #%d"
#define CLIENT_MESSAGE "Client ID %d say >>%s"


int sendbroadmsg(int);

struct str_clients{
	int clientfd;
	int flag;
};

struct str_clients clients[SIZE];
int count;
int epfd;

int main()
{
	int sockfd,con,sock_fd;
	struct sockaddr_in server,client;
	int i,n,len;
	int fds;
	char words[SIZE];
	struct epoll_event ev,events[SIZE];
	len=sizeof(client);
	count=0;
	
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	bind(sockfd,(struct sockaddr*)&server,sizeof(server));
	
	listen(sockfd,SIZE);
	
	epfd=epoll_create(SIZE);
	ev.data.fd=sockfd;
	ev.events=EPOLLIN;
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&ev);
	
	fcntl(sockfd,F_SETFL,fcntl(sockfd,F_GETFD,0)|O_NONBLOCK);
	
	for(i=0;i<SIZE;i++){
		clients[i].clientfd=-1;
		clients[i].flag=0;
	}
	
	while(1){
		
		fds=epoll_wait(epfd,events,SIZE,-1);
		printf("--------the fds=%d------------\n",fds);
		
		for(i=0;i<fds;i++){
			sock_fd=events[i].data.fd;
			//如果是新加入的连接
			if(events[i].data.fd==sockfd){
				con=accept(sockfd,(struct sockaddr*)&client,&len);
				printf("client connection from %s:%d(IP:port),client fd=%d\n",inet_ntoa(client.sin_addr),ntohs(client.sin_port),con);
				ev.data.fd=con;
				ev.events=EPOLLIN;
				epoll_ctl(epfd,EPOLL_CTL_ADD,con,&ev);
			
			int j;
			for(j=0;clients[j].flag!=0&&j<SIZE;j++);
			if(j<SIZE){
				clients[j].clientfd=con;
				clients[j].flag=1;
				count++;
				printf("Add new clientfd=%d to epoll\n",con);
				printf("now there are %d clients in the chat room\n",count);
			}
			else
				printf("too many clients\n");
			char message[SIZE];
			memset(message,0,SIZE);
			sprintf(message,SERVER_MESSAGE,con);
			send(con,message,strlen(message),0);
		}
		//如果不是新加入的连接
		else{
			sendbroadmsg(sock_fd);
		}
	}
}
close(epfd);
}
		  		
int sendbroadmsg(int sockfd)
{
	int i,j;
	char buf[SIZE],message[SIZE];
	memset(buf,0,SIZE);
	struct epoll_event ev;
	//接收一个客户端的信息
	int len=recv(sockfd,buf,SIZE,0);
	//如果客户端发送信息为0就关闭这个连接
	if(len==0){
		
		close(sockfd);
		for(i=0;clients[i].clientfd!=sockfd;i++);
		clients[i].flag=0;
		printf("the client %d is out\n",clients[i].clientfd);
		count--;
		ev.data.fd=clients[i].clientfd;
		ev.events=EPOLLIN;
		epoll_ctl(epfd,EPOLL_CTL_DEL,clients[i].clientfd,&ev);
	}
	//把一个客户端的信息发送给其它所有的客户端
	else{
		memset(message,0,SIZE);
		sprintf(message,CLIENT_MESSAGE,sockfd,buf);
		
		for(i=0;i<count;i++){
			if(clients[i].clientfd!=sockfd){
				send(clients[i].clientfd,message,strlen(message),0);
			}
		}
	}
}
			  	
		 
