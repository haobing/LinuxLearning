#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

#define MAXLINE 10
#define OPEN_MAX 100
#define LISTEN 20
#define PORT 8888

int main()
{
	int sockfd,con,sock_fd;
	struct sockaddr_in server,client;
	int len;
	char buf[MAXLINE];
	int epfd;
	int fds;
	int n,i;
	struct epoll_event ev,events[20];
	len=sizeof(client);
	
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	bind(sockfd,(struct sockaddr*)&server,sizeof(server));
	listen(sockfd,10);
	
	epfd=epoll_create(256);
	ev.data.fd=sockfd;
	ev.events=EPOLLIN;
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&ev);
	
	while(1){
		fds=epoll_wait(epfd,events,20,500);
		
		for(i=0;i<fds;i++){
			if(events[i].data.fd==sockfd){
				con=accept(sockfd,(struct sockaddr*)&client,&len);
				printf("accept a new client :%s\n",inet_ntoa(client.sin_addr));
				ev.data.fd=con;
				ev.events=EPOLLIN;
				epoll_ctl(epfd,EPOLL_CTL_ADD,con,&ev);
			}
			else if(events[i].events&EPOLLIN){
				if((sock_fd=events[i].data.fd)<0)
					continue;
				if((n=recv(sock_fd,buf,MAXLINE,0))<0){
					if(errno==ECONNRESET){
						close(sock_fd);
					}
					else{
						printf("readline error\n");
					}}
				else if(n==0){
					close(sock_fd);
					printf("close\n");
					events[i].data.fd=-1;
				}
				printf("%d-->%s\n",sock_fd,buf);
				ev.data.fd=sock_fd;
				ev.events=EPOLLOUT;
				epoll_ctl(epfd,EPOLL_CTL_MOD,sock_fd,&ev);
			  }
		 else if(events[i].events&EPOLLOUT){
			 	sock_fd=events[i].data.fd;
			 	printf("out\n");
			 	scanf("%s",buf);
			 	send(sock_fd,buf,MAXLINE,0);
			 	
			 	ev.data.fd=sock_fd;
			 	ev.events=EPOLLIN;
			 	epoll_ctl(epfd,EPOLL_CTL_MOD,sock_fd,&ev);
			}
		}
	}
}
