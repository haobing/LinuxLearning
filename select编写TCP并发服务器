服务器：
#include<stdio.h>  
#include<stdlib.h>  
#include<string.h>  
#include<sys/socket.h>  
#include<sys/types.h>  
#include<netinet/in.h>  
#include<arpa/inet.h>  
#include <sys/fcntl.h> 

#define PORT 8888
#define BUFFER_SIZE 1024

int main()
{
	int sockfd,con,len,nread;
	int maxi,maxfd,i;
	int client[FD_SETSIZE];
	char buf[BUFFER_SIZE];
	struct sockaddr_in server,clientaddr;
	len=sizeof(server);
	fd_set allset,rset;
	
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	bind(sockfd,(struct sockaddr*)&server,sizeof(server));
	
	listen(sockfd,20);
	
	FD_ZERO(&rset);
	FD_SET(sockfd,&rset);
	maxfd=sockfd;
	maxi=-1;
	for(i=0;i<FD_SETSIZE;i++){
		client[i]=-1;
	}
	while(1){
		allset=rset;
		nread=select(maxfd+1,&allset,NULL,NULL,NULL);
		if(FD_ISSET(sockfd,&allset)){
			con=accept(sockfd,(struct sockaddr*)&clientaddr,&len);
			
			for(i=0;i<FD_SETSIZE;i++){
				if(client[i]<0){
					client[i]=con;
					maxi=i;
					break;
				}
			}
				
				if(maxfd<con)
					maxfd=con;
					printf("i=%d\n",i);
					FD_SET(con,&rset);
			}
		
			for(i=0;i<=maxi;i++){
				if((con=client[i])<0)
					continue;
					if(FD_ISSET(con,&allset)){
						if(recv(con,buf,sizeof(buf),0)==0){
							close(con);
							FD_CLR(con,&rset);
							client[i]=-1;
						}
						else{
							printf("i reciev:%s\n",buf);
							memset(buf,0,sizeof(buf));
							printf("peae input some words\n");
							fgets(buf,sizeof(buf),stdin);
							send(con,buf,strlen(buf),0);
						}
					}
				}
			}
		}
			
	客户端：
#include<stdio.h>  
#include<stdlib.h>  
#include<string.h>  
#include<sys/socket.h>  
#include<sys/types.h>  
#include<netinet/in.h>  
#include<arpa/inet.h>  
#include <sys/fcntl.h> 

#define PORT 8888
#define BUFFER_SIZE 1024

int main()
{
	int sockfd,len;
	struct sockaddr_in server;
	char buf[BUFFER_SIZE];
	len=sizeof(server);
	
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	connect(sockfd,(struct sockaddr*)&server,len);
	while(1){
		printf("your words\n");
		memset(buf,0,sizeof(buf));
		gets(buf);
		send(sockfd,buf,strlen(buf),0);
		printf("send....\n");
		memset(buf,0,sizeof(buf));
		recv(sockfd,buf,sizeof(buf),0);
		printf("my reciev is:%s\n",buf);
	}
}
				
					
	
  
  
  
  
