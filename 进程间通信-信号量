#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<sys/ipc.h>
#include<sys/sem.h>

#define path1 "/tmp/test.txt"

key_t key;
int semid;

void sem_p(void)
{
	struct sembuf semp;
	semp.sem_num=0;
	semp.sem_op=-1;
	semp.sem_flg=SEM_UNDO;
	if(semop(semid,&semp,1)==-1)
		printf(" semp error\n");
}

void sem_v(void)
{
	struct sembuf semv;
	semv.sem_num=0;
	semv.sem_op=1;
	semv.sem_flg=SEM_UNDO;
	if(semop(semid,&semv,1)==-1)
		printf("semv error\n");
}
void sem_init(void)
{
	union semun{
		int val;
		struct semid_ds *buf;
		unsigned short *array;
	}semu;
	semu.val=1;
	semctl(semid,0,SETVAL,semu);
}

int main()
{
	pid_t pid;
	key=ftok(path1,1);
	semid=semget(key,1,0777|IPC_CREAT);
	sem_init();
	if((pid=fork())<0)
		printf(" pid error\n");
	else if(pid==0){
		while(1){
			sem_p();//不管带不带参数，函数后面都要加括号
			printf("wo shi haizi\n");
			for(int i=0;i<5;i++){
				printf("i=%d\n",i);
				sleep(1);
			}
			sem_v();
			
		}
	}else if(pid>0){
		while(1){
			sem_p();
			printf("i'm the father -----\n");
			sem_v();
			sleep(1);
			
		}
	}
	semctl(semid,0,IPC_RMID);
}
	
