信号量和互斥锁比较相似，都是需要按照约定的规则，对信号或者锁进行判断，处于sem_p 和sem_v之间的代码并不是原子操作。
因此可以在临界区之前设立锁 或者信号量，每次执行到锁或者信号量的位置的时候就会执行判断，如果信号量不大于0这里就阻塞，如果锁是锁住的状态这里就阻塞，
可以说锁或者信号量只是编程约定的一些判断规则。记住它们中间的代码并不是原子操作。
server：
#include<stdio.h>
#include<stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include<string.h>
#include<errno.h>
#include<sys/sem.h>
#include<string.h>
#include<fcntl.h>


#define PATH1 "/mnt/shared/practice/text1"
#define PATH2 "/mnt/shared/practice/text2"
#define PATH3 "/text"

void sem_p(int semid)
{
	struct sembuf semp;
	semp.sem_num=0;
	semp.sem_op=-1;
	semp.sem_flg=SEM_UNDO;
	if(semop(semid,&semp,1)==-1)
		printf("semop_p error\n");
}

void sem_v(int semid)
{
	struct sembuf semv;
	semv.sem_num=0;
	semv.sem_op=1;
	semv.sem_flg=SEM_UNDO;
	if(semop(semid,&semv,1)==-1)
		printf("semop_v error\n");
}

struct mes{
	long type;
	char message[50];
};
int main()
{
	char *buf;
	char words[20];
	struct mes my_message;
	my_message.type=10;
	sprintf(my_message.message,"wo shi fuwuqi:gong xiang nei cun\n");
	key_t semkey;
	key_t shmkey;
	int shmid;
	int semid;
	
	semkey=ftok(PATH1,1);
	semid=semget(semkey,1,IPC_CREAT|0777);
	semctl(semid,0,SETVAL,1);
	
	
	shmkey=ftok(PATH2,1);
	shmid=shmget(shmkey,1024,IPC_CREAT|0777);
	buf=(char *)shmat(shmid,NULL,0);
	
	unlink(PATH3);
	mkfifo(PATH3,0777);
	
	sem_p(semid);
	int fd=open(PATH3,O_RDONLY);
	read(fd,words,sizeof(words));
	printf("after the sem_p,and the words from client is:%s\n",words);
	sleep(5);
	memcpy(buf,(char *)&my_message,sizeof(my_message));
	sem_v(semid);
}
	
client:
#include<stdio.h>
#include<stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include<string.h>
#include<errno.h>
#include<sys/sem.h>
#include<fcntl.h>


#define PATH1 "/mnt/shared/practice/text1"
#define PATH2 "/mnt/shared/practice/text2"
#define PATH3 "/text"

void sem_p(int semid)
{
	struct sembuf semp;
	semp.sem_num=0;
	semp.sem_op=-1;
	semp.sem_flg=SEM_UNDO;
	if(semop(semid,&semp,1)==-1)
		printf("semop_p error\n");
}

void sem_v(int semid)
{
	struct sembuf semv;
	semv.sem_num=0;
	semv.sem_op=1;
	semv.sem_flg=SEM_UNDO;
	if(semop(semid,&semv,1)==-1)
		printf("semop_v error\n");
}

struct mes{
	long type;
	char message[50];
};
int main()
{
	char *buf;
	char words[20];
	struct mes my_message;
	key_t semkey;
	key_t shmkey;
	int shmid;
	int semid;
	semkey=ftok(PATH1,1);
	semid=semget(semkey,1,IPC_CREAT|0777);
	
	
	shmkey=ftok(PATH2,1);
	shmid=shmget(shmkey,1024,IPC_CREAT|0777);
	buf=(char *)shmat(shmid,NULL,0);
	
	mkfifo(PATH3,0777);
	int fd=open(PATH3,O_WRONLY);
	printf("please input the words\n");
	fgets(words,sizeof(words),stdin);
	write(fd,words,strlen(words));

	printf("ready to read the memory\n");
	sem_p(semid);
	memcpy((char *)&my_message,buf,sizeof(my_message));
	printf("the id=%d,the buf=%s\n",my_message.type,my_message.message);
	sem_v(semid);
	shmdt(buf);
	
	if(semctl(semid,0,IPC_RMID)==-1)
			printf("semctl del error\n");
	if(shmctl(shmid,IPC_RMID,0)==-1)
			printf("shmctl error\n");
	
}
