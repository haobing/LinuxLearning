#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SIZE 64
#define PATH "/mnt/hgfs/Linux/practice/text"

typedef struct{
	pid_t pid;
	char buf[SIZE];
}SHM;

void handle(int i)
{
	printf("this is signle i=%d\n",i);
}
int main()
{
	key_t key;
	SHM *message;
	int n;
	int shmid;
	pid_t pid;
	
	key=ftok(PATH,1);
		printf("my key=%d\n",key);
	signal(SIGINT,handle);
	
	shmid=shmget(key,sizeof(SHM),0666|IPC_CREAT);
	printf("shmid=%d\n",shmid);

	
	message=(SHM*)shmat(shmid,NULL,0);
	message->pid=getpid();
	pid=message->pid;
	
	while(1){
		if(strcmp(message->buf,"quit\n")==0)
			break;
			pause();
		printf("read message=%s\n",message->buf);
	}
	return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SIZE 64
#define PATH "/mnt/hgfs/Linux/practice/text"

typedef struct{
	pid_t pid;
	char buf[SIZE];
}SHM;

int main()
{
	key_t key;
	SHM *message;
	int shmid;
	
	key=ftok(PATH,1);
		printf("my key=%d\n",key);
	shmid=shmget(key,sizeof(SHM),0666|IPC_CREAT);
		printf("shmid=%d\n",shmid);
	message=(SHM*)shmat(shmid,NULL,0);
	
	while(1){
		printf("please input some words\n");
		fgets(message->buf,sizeof(SHM),stdin);
		message->pid=getpid();
		if(strcmp(message->buf,"quit\n")==0)
			break;
		}
		shmdt(message);
		shmctl(shmid,IPC_RMID,NULL);
	}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SIZE 64
#define PATH "/mnt/hgfs/Linux/practice/text"

typedef struct{
	pid_t pid;
	char buf[SIZE];
}SHM;

int main()
{
	key_t key;
	SHM *message;
	int shmid;
	
	key=ftok(PATH,1);
		printf("my key=%d\n",key);
	shmid=shmget(key,sizeof(SHM),0666|IPC_CREAT);
		printf("shmid=%d\n",shmid);
	message=(SHM*)shmat(shmid,NULL,0);
	
	while(1){
		printf("please input some words\n");
		fgets(message->buf,sizeof(SHM),stdin);
		message->pid=getpid();
		if(strcmp(message->buf,"quit\n")==0)
			break;
		}
		shmdt(message);
		shmctl(shmid,IPC_RMID,NULL);
	}
