读写锁也称为共享-独占（shared-exclusive）锁，当读写锁以读模式加锁时，它是以共享模式锁住，
当以写模式加锁时，它是以独占模式锁住。读写锁非常适合读数据的频率远大于写数据的频率从的应用中。
这样可以在任何时刻运行多个读线程并发的执行，给程序带来了更高的并发度。
1. 当读写锁是写加锁状态时，在这个锁被解锁之前，所有试图对这个锁加锁的线程都会被阻塞； 
2. 当读写锁在读加锁状态时，所有试图以读模式对它进行加锁的线程都可以得到访问权，但是以写模式对它进行枷锁的线程将阻塞； 
3. 当读写锁在读模式锁状态时，如果有另外线程试图以写模式加锁，读写锁通常会阻塞随后的读模式锁请求，
这样可以避免读模式锁长期占用，而等待的写模式锁请求长期阻塞； 
这种锁适用对数据结构进行读的次数比写的次数多的情况下，因为可以进行读锁共享。

API接口说明：

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<pthread.h>

pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;

int global_num=10;

void err_exit(const char *err_msg)
{
	printf("error:%s\n",err_msg);
	exit(1);
}

void *thread_read_lock(void *arg)
{
	char *p=(char *)arg;
	while(1){
	pthread_rwlock_rdlock(&rwlock);
	
	printf("thre pthread %s into the midlle,global_num=%d\n",p,global_num);
	sleep(1);
	
	printf("the pthread %s exit the middle\n",p);
	pthread_rwlock_unlock(&rwlock);
	sleep(1);
}
}

void *thread_write_lock(void *arg)
{
	char *p=(char *)arg;
	while(1){
		pthread_rwlock_wrlock(&rwlock);
		global_num++;
		printf("the pthread %s into the middle,global_num=%d\n",p,global_num);
		sleep(1);
		printf("the pthread %s exit the middle\n",p);
		pthread_rwlock_unlock(&rwlock);
		sleep(1);
	}
}

int main()
{
	pthread_t read1,read2,write1,write2;
	
	pthread_create(&read1,NULL,thread_read_lock,"read1");
	
	pthread_create(&read2,NULL,thread_read_lock,"read2");
	
	pthread_create(&write1,NULL,thread_write_lock,"write1");
	
	pthread_create(&write2,NULL,thread_write_lock,"write2");
	
	pthread_join(read1,NULL);
}
