/*文件锁：1、当一个进程终止时，它所建立的锁全部释放，任何时候关闭一个描述符时，
             则该进程通过这一描述符可以存访的文件上的任何一把锁都被释放
          2、由fork产生的子程序不继承父进程所设置的锁
          3、在执行exec之后，新程序可以继承原来执行程序的锁


*/
#include <unistd.h>
#include <sys/file.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include<sys/wait.h>

int lock_reg(int fd,int cmd,int type)
{
	struct flock lock;
	lock.l_type=type;
	lock.l_start=0;
	lock.l_whence=SEEK_SET;
	lock.l_len=0;
	
	if(fcntl(fd,cmd,&lock)==-1)
		printf(" fcntl error\n");
}
int main()
{
	pid_t pid;
	char *buf="wo shi fu qin\n";
	int fd;
	unlink("./lock");
	fd=open("./lock",O_RDWR|O_CREAT);
	if((pid=fork())<0)
		printf("fork error\n");
	else if(pid==0){
		lock_reg(fd,F_SETLK,F_WRLCK);
		if(write(fd,"hello,wo shi hai zi\n",25)<=0)
			sleep(20);
			write(fd,"hai zi you kaishi xie le\n",30);
			//printf("the child write error\n");
		}
		else if(pid>0){
			sleep(1);
		write(fd,buf,20);
			printf("the father write ok\n");
		}
		write(fd,"wo shi shui\n",20);
}

/*父子进程执行程序
int main()
{
	int i=0;
	pid_t pid;
	if((pid=fork())==0){
		for(i=0;i<10;i++){
			printf("the child i=%d\n",i);
			sleep(1);
		}
		
	}
		else if(pid>0){
			for(i=0;i<10;i++){
			printf("the father i=%d\n",i);
			sleep(1);
		}
	}
		printf("ni cai woshi shui\n");
		
		printf("wo shi fu qin\n");
	}
	*/	




打开两个终端运行本程序
#include <unistd.h>
#include <sys/file.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>

void lock_set(int fd,int type)
{
	struct flock lock;
	lock.l_whence=SEEK_SET;
	lock.l_start=0;
	lock.l_len=0;
	
	while(1){
		lock.l_type=type;
		if(fcntl(fd,F_SETLK,&lock)==0){
			if(lock.l_type==F_RDLCK)
				printf("read lock set by %d\n",getpid());
			else if(lock.l_type==F_WRLCK)
				printf("write lock set by %d\n",getpid());
			else if(lock.l_type==F_UNLCK)
				printf("release lock by %d\n",getpid());
				return ;
		}
		
		fcntl(fd,F_GETLK,&lock);
		if(lock.l_type!=F_UNLCK){
			if(lock.l_type==F_RDLCK)
				printf("read lock already set by %d\n",lock.l_pid);
				else if(lock.l_type==F_WRLCK)
					printf("write lock already set by %d\n",lock.l_pid);
				getchar();
		}
	}
}
	
 int main()
 {
 	int fd;
 	fd=open("./hello",O_RDWR|O_CREAT,0666);
 	if(fd<0){
 		perror("open");
 		exit(1);
 	}
 	lock_set(fd,F_WRLCK);
 	getchar();
 	lock_set(fd,F_UNLCK);
 	getchar();
 	close(fd);
}
