多播程序框架主要包含套接字初始化、设置多播超时时间、加入多播组、发送数据、接收数据以及从多播组中离开几个方面。其步骤如下：

（1）建立一个socket。

（2）然后设置多播的参数，例如超时时间TTL、本地回环许可LOOP等。

（3）加入多播组。

（4）发送和接收数据。

（5）从多播组离开。

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MCAST_ADDR "224.0.0.88"
#define MCAST_PORT 8888
int broad(int port)
{
    struct sockaddr_in seraddr,cliaddr;
    int sockfd = 0;
    unsigned int sockelen = 0;
    int ret = 0;
    int n = 0;
    char buffer[1024];

    sockfd = socket(AF_INET,SOCK_DGRAM,0);
    if(sockfd<0)
    {
        printf("socket error\n");
        return -1;
    }

    sockelen = sizeof(seraddr);
    memset(&seraddr,0,sockelen);
    seraddr.sin_family = AF_INET;
    seraddr.sin_port = htons(port);
    seraddr.sin_addr.s_addr = htonl(INADDR_ANY);

    ret = bind(sockfd,(struct sockaddr*)&seraddr,sockelen);
    if(ret<0)
    {
        printf("bind error\n");
        return -1;
    }

    int loop = 1;
    ret = setsockopt(sockfd,IPPROTO_IP,IP_MULTICAST_LOOP,&loop,sizeof(loop));
    if(ret < 0)
    {
        printf("setsockopt error\n");
        return -1;
    }

    struct ip_mreq mreq;
    mreq.imr_multiaddr.s_addr = inet_addr(MCAST_ADDR);
    mreq.imr_interface.s_addr = htonl(INADDR_ANY);
    ret = setsockopt(sockfd,IPPROTO_IP,IP_ADD_MEMBERSHIP,&mreq,sizeof(mreq));
    if(ret < 0)
    {
        printf("setsockopt error\n");
        return -1;
    }
    unsigned char *msg = (unsigned char *)buffer;
    int i=0;
    printf("the while\n");
    while(1)
    {
        n = recvfrom(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&cliaddr,&sockelen);
        if(n<0)
        {
            printf("recvfrom error\n");
            break;
        }
        
        if(n>0)
        {
            for(i=0;i<n;i++)
            {
                printf(" %02x ",msg[i]);
                if(i == 187)
                {
                    printf("***\n");
                }
            }
            printf("the end\n");
        }
    }
    ret = setsockopt(sockfd, IPPROTO_IP, IP_DROP_MEMBERSHIP,&mreq, sizeof(mreq));
   // close(sockfd);
    return 0;
}

int main()
{
    int ret = 0;
    ret = broad(8888);
    if(ret<0)
    {
        printf("error\n");
    }

}
