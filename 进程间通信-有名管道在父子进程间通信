管道是单向的、先进先出的，它把一个进程的输出和另一个进程的输入连接在一起。

Ø  一个进程（写进程）在管道的尾部写入数据，另一个进程（读进程）从管道的头部读出数据。

Ø  数据被一个进程读出后，将被从管道中删除，其它读进程将不能再读到这些数据。

Ø 管道提供了简单的流控制机制，进程试图读空管道时，进程将阻塞。同样，管道已经满时，进程再试图向管道写入数据，进程将阻塞

Ø  管道包括无名管道和有名管道两种，前者用于父进程和子进程间的通信，后者可用于运行于同一系统中的任意两个进程间的通信。
必须在系统调用fork( )前调用pipe( )，否则子进程将不会继承文件描述符
FIFO文件在使用上和普通文件有相似之处，但是也有不同之处：

Ø  读取fifo文件的进程只能以”RDONLY”方式打开fifo文件。

Ø  写fifo文件的进程只能以”WRONLY”方式打开fifo

Ø  fifo文件里面的内容被读取后，就消失了。但是普通文件里面的内容读取后还存在。
 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<fcntl.h>
#include<sys/stat.h>
#define PATH "/text"
int main()
{
int fd,res;
char buf[20];
pid_t pid;
unlink(PATH);
if((res=access(PATH,F_OK))==-1)
{
fputs("creat the fifo \n",stdout);
mkfifo(PATH,0777);
}
printf("creat the fork\n");
pid=fork();
if(pid==0)
{
fd=open(PATH,O_WRONLY);
printf("the haizi fd=%d\n",fd);
sprintf(buf,"wo shi haizi pid=%d\n",getpid());
write(fd,buf,strlen(buf));
}
else if(pid>0)
{
fd=open(PATH,O_RDONLY);
memset(buf,0,sizeof(buf));
read(fd,buf,sizeof(buf));
printf("the fathe :%s\n",buf);

}
else
{printf("error fork\n");
}
}
