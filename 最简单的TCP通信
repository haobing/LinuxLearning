    因为 TCP 连接是全双工的（数据在两个方向上可以同时传递，图 4），因此每个方向就必须能够单独的关闭。
就比如客户端执行了半关闭操作后，只是通知服务器它没有数据要发送了，并不代表它不能接收数据。因此，只要服务器还没有主动关闭，
就能够向客户端继续发送数据。也就相当于在步骤 2 和 步骤 3 之间，服务器仍然能够向客户端发送数据。

    在 Linux 编程学习笔记中讲网络编程的时候，我们关闭连接用的都是函数 close. 任何一端使用函数 close 进行关闭，
实际上就直接把全双工两个方向的连接全部关闭了（图 4 中的蓝色通道和红色通道）。如果只想关闭一端，只能使用函数 shutdown 来关闭一个方向的连接。
   数据传输中（服务端）ack=（客户端）seq+len；握手或者挥手中（服务端）ack=（客户端）seq+len
   MSS表示最大报文段长度。在连接建立的时候，即在发送 SYN 段的时候，同时会将 MSS 发送给对方（MSS 选项只能出现在 SYN 段中！！！），
告诉对端它期望接收的 TCP 报文段数据部分最大长度。

    因为网络传输数据时，数据是最终是要交付到链路层协议上的，也就是说最后要封装成“帧”。二型以太网（Ethernet Type 2）中规定，
 帧的大小不能超过 1518 个字节（14 字节的帧头 + 4 字节帧校验和 + 最多 1500 字节数据）。所以 IP 数据报的大小如果超过了 1500 字节，
 要想交付给链路层就必须进行“分片”。
“分片”指的是一个 IP 数据报太大，需要拆分成一个一个的小段，变成多个 IP 数据报。
这种分片显然是不利的，有一定的开销。为了避免分片开销，我们希望 IP 数据报的大小不超过 1500 字节。除去 IP 数据报的首部 20 字节，
也就是希望 TCP 报文段不超过 1480 字节。再减去 TCP 报文段首部 20 字节，也就是 TCP 携带的数据不超过 1460 字节。

服务器端：
	
#include <sys/types.h>  
#include <sys/socket.h>  
#include <stdio.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
#include <unistd.h>  
#include <string.h>  
#include <stdlib.h>  
#include <fcntl.h>  
#include <sys/shm.h>

#define PORT 8888
#define QUEUE 20
#define BUFFER_SIZE 1024

int main()
{
	int sockfd,con,n,i=0;
	char buf[BUFFER_SIZE];
	struct sockaddr_in server,client;
		n=sizeof(client);
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	bind(sockfd,(struct sockaddr*)&server,sizeof(server));
	
	listen(sockfd,QUEUE);
	
	printf("waiting for the client to connect\n");
	con=accept(sockfd,(struct sockaddr*)&client,&n);
	printf("successfule\n");
	while(1){
		i++;
		memset(buf,0,sizeof(buf));
		recv(con,buf,sizeof(buf),0);
		printf("the buf recived from client is:%s\n",buf);
		memset(buf,0,sizeof(buf));
		sprintf(buf,"i'm the server,the message send to client is %d\n",i);
		send(con,buf,strlen(buf),0);
	}
	close(sockfd);
	close(con);
	return 0;
}
		
    
    客户端：
    #include <sys/types.h>  
#include <sys/socket.h>  
#include <stdio.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
#include <unistd.h>  
#include <string.h>  
#include <stdlib.h>  
#include <fcntl.h>  
#include <sys/shm.h> 

#define PORT 8888
#define BUFFER_SIZE 1024

int main()
{
	char buf[BUFFER_SIZE];
	int sockfd;
	struct sockaddr_in server;
	
	sockfd=socket(AF_INET,SOCK_STREAM,0);
	
	bzero(&server,sizeof(server));
	server.sin_family=AF_INET;
	server.sin_port=htons(PORT);
	server.sin_addr.s_addr=htonl(INADDR_ANY);
	
	connect(sockfd,(struct sockaddr*)&server,sizeof(server));
	while(1){
		memset(buf,0,sizeof(buf));
		printf("please input the message\n");
		gets(buf);
		send(sockfd,buf,strlen(buf),0);
		memset(buf,0,sizeof(buf));
		recv(sockfd,buf,sizeof(buf),0);
		printf("recievd from the server is:%s\n",buf);
		
	}
	close(sockfd);
}
		
	
    
